{"version":3,"sources":["components/Header.js","components/Footer.js","components/AddNote.js","components/NoteList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","AddNote","props","useState","expand","setExpand","title","body","note","setNote","InputEvent","event","target","name","value","prevData","console","log","type","onChange","placeholder","autoComplete","rows","column","onClick","onDoubleClick","passNote","role","aria-label","NoteList","deleteItem","id","App","addItem","setAddItem","onDelete","olddata","filter","currdata","indx","map","val","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0NAYeA,EAVA,WACb,OACE,oCACE,yBAAKC,UAAU,UACb,+CCMOC,EAVA,WACb,OACE,oCACE,gCACE,8D,cCgEOC,EApEC,SAACC,GAAW,IAAD,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,OAEDF,mBAAS,CAC/BG,MAAO,GACPC,KAAM,KAJiB,mBAElBC,EAFkB,KAEZC,EAFY,KAOnBC,EAAa,SAACC,GAAW,IAAD,EACJA,EAAMC,OAAtBC,EADoB,EACpBA,KAAMC,EADc,EACdA,MACdL,GAAQ,SAACM,GACP,OAAO,2BACFA,GADL,kBAEGF,EAAOC,OAGZE,QAAQC,IAAIT,IAed,OACE,oCACE,yBAAKT,UAAU,SACb,8BACGK,EACC,2BACEc,KAAK,OACLL,KAAK,QACLC,MAAON,EAAKF,MACZa,SAAUT,EACVU,YAAY,QACZC,aAAa,QAEb,KAEJ,8BACEC,KAAK,IACLC,OAAO,OACPV,KAAK,OACLC,MAAON,EAAKD,KACZY,SAAUT,EACVU,YAAY,iBACZI,QA7BQ,WAChBnB,GAAU,IA6BFoB,cA3BS,WACjBpB,GAAU,OA6BLD,EACC,4BAAQoB,QAvCC,WACftB,EAAMwB,SAASlB,GACfC,EAAQ,KAqCyBV,UAAU,WACnC,0BAAM4B,KAAK,MAAMC,aAAW,cAA5B,WAIA,QCxCGC,EAtBE,SAAC3B,GAKhB,OACE,oCACE,yBAAKH,UAAU,kBACb,yBAAKA,UAAU,aACb,gCAAMG,EAAMI,MAAZ,KACA,+BAAKJ,EAAMK,KAAX,KACA,4BAAQR,UAAU,aAAayB,QAVpB,WACjBtB,EAAM4B,WAAW5B,EAAM6B,MAUf,0BAAMJ,KAAK,MAAMC,aAAW,SAA5B,2BCsDGI,G,MA5DH,WAAO,IAAD,EACc7B,mBAAS,CACrC,CACEG,MAAO,oBACPC,KAAM,iBAER,CACED,MAAO,yBACPC,KAAM,+CAER,CACED,MAAO,yBACPC,KACE,kHAEJ,CACED,MAAO,6BACPC,KAAM,+BAER,CACED,MAAO,eACPC,KACE,sGAtBU,mBACT0B,EADS,KACAC,EADA,KAgCVC,EAAW,SAACJ,GAChBG,GAAW,SAACE,GAAD,OACTA,EAAQC,QAAO,SAACC,EAAUC,GACxB,OAAOA,IAASR,SAKtB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASL,SAjBG,SAAClB,GACf0B,GAAW,SAACnB,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAqBP,UAgBpByB,EAAQO,KAAI,SAACC,EAAKC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLX,GAAIW,EACJpC,MAAOmC,EAAInC,MACXC,KAAMkC,EAAIlC,KACVuB,WAAYK,OAIlB,kBAAC,EAAD,SCnDcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.96301cc4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <h1> Keep Clone </h1>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <>\r\n      <footer>\r\n        <p> Greg Shepherd ¬© CDA2520C</p>\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\n\r\nconst AddNote = (props) => {\r\n  const [expand, setExpand] = useState(false);\r\n  const [note, setNote] = useState({\r\n    title: \"\",\r\n    body: \"\",\r\n  });\r\n\r\n  const InputEvent = (event) => {\r\n    const { name, value } = event.target;\r\n    setNote((prevData) => {\r\n      return {\r\n        ...prevData,\r\n        [name]: value,\r\n      };\r\n    });\r\n    console.log(note);\r\n  };\r\n\r\n  const addEvent = () => {\r\n    props.passNote(note);\r\n    setNote({});\r\n  };\r\n\r\n  const expandBox = () => {\r\n    setExpand(true);\r\n  };\r\n  const retractBox = () => {\r\n    setExpand(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"notes\">\r\n        <form>\r\n          {expand ? (\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={note.title}\r\n              onChange={InputEvent}\r\n              placeholder=\"Title\"\r\n              autoComplete=\"off\"\r\n            />\r\n          ) : null}\r\n\r\n          <textarea\r\n            rows=\"3\"\r\n            column=\"auto\"\r\n            name=\"body\"\r\n            value={note.body}\r\n            onChange={InputEvent}\r\n            placeholder=\"Take a note...\"\r\n            onClick={expandBox}\r\n            onDoubleClick={retractBox}\r\n          ></textarea>\r\n        </form>\r\n        {expand ? (\r\n          <button onClick={addEvent} className=\"add-btn\">\r\n            <span role=\"img\" aria-label=\"add button\">\r\n              ‚ûï\r\n            </span>\r\n          </button>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddNote;\r\n","import React from \"react\";\r\n\r\nconst NoteList = (props) => {\r\n  const deleteNote = () => {\r\n    props.deleteItem(props.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"note-container\">\r\n        <div className=\"note-list\">\r\n          <h3> {props.title} </h3>\r\n          <p> {props.body} </p>\r\n          <button className=\"delete-btn\" onClick={deleteNote}>\r\n            <span role=\"img\" aria-label=\"trash\">\r\n              üóëÔ∏è\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoteList;\r\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport AddNote from \"./components/AddNote\";\nimport NoteList from \"./components/NoteList\";\n\nimport \"./styles/App.scss\";\n\nconst App = () => {\n  const [addItem, setAddItem] = useState([\n    {\n      title: \"Refine Keep Clone\",\n      body: \"Play with CSS\",\n    },\n    {\n      title: \"Work on better buttons\",\n      body: \"Research ways to do that, I have some ideas\",\n    },\n    {\n      title: \"Keep playing with text\",\n      body:\n        \"I got longer entries to wrap and lengthen, sure took me a while, but it was really cool when I got it to work!\",\n    },\n    {\n      title: \"CSS seems really important\",\n      body: \"for creating a better UI/UX\",\n    },\n    {\n      title: \"GitHub Pages\",\n      body:\n        \"is really cool, but I'm still confused on how to upload a project to SOTD and get it to function\",\n    },\n  ]);\n\n  const addNote = (note) => {\n    setAddItem((prevData) => {\n      return [...prevData, note];\n    });\n  };\n\n  const onDelete = (id) => {\n    setAddItem((olddata) =>\n      olddata.filter((currdata, indx) => {\n        return indx !== id;\n      })\n    );\n  };\n\n  return (\n    <>\n      <Header />\n      <AddNote passNote={addNote} />\n      {addItem.map((val, index) => {\n        return (\n          <NoteList\n            key={index}\n            id={index}\n            title={val.title}\n            body={val.body}\n            deleteItem={onDelete}\n          />\n        );\n      })}\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}